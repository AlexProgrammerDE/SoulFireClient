/* eslint-disable */
// @generated by protobuf-ts 2.11.1 with parameter long_type_string,optimize_code_size,eslint_disable,ts_nocheck
// @generated from protobuf file "grpc/channelz/v1/channelz.proto" (package "grpc.channelz.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Copyright 2018 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
// This file defines an interface for exporting monitoring information
// out of gRPC servers.  See the full design at
// https://github.com/grpc/proposal/blob/master/A14-channelz.md
//
// The canonical version of this proto can be found at
// https://github.com/grpc/grpc-proto/blob/master/grpc/channelz/v1/channelz.proto
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Channelz } from "./channelz";
import type { GetSocketResponse } from "./channelz";
import type { GetSocketRequest } from "./channelz";
import type { GetSubchannelResponse } from "./channelz";
import type { GetSubchannelRequest } from "./channelz";
import type { GetChannelResponse } from "./channelz";
import type { GetChannelRequest } from "./channelz";
import type { GetServerSocketsResponse } from "./channelz";
import type { GetServerSocketsRequest } from "./channelz";
import type { GetServerResponse } from "./channelz";
import type { GetServerRequest } from "./channelz";
import type { GetServersResponse } from "./channelz";
import type { GetServersRequest } from "./channelz";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetTopChannelsResponse } from "./channelz";
import type { GetTopChannelsRequest } from "./channelz";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Channelz is a service exposed by gRPC servers that provides detailed debug
 * information.
 *
 * @generated from protobuf service grpc.channelz.v1.Channelz
 */
export interface IChannelzClient {
    /**
     * Gets all root channels (i.e. channels the application has directly
     * created). This does not include subchannels nor non-top level channels.
     *
     * @generated from protobuf rpc: GetTopChannels
     */
    getTopChannels(input: GetTopChannelsRequest, options?: RpcOptions): UnaryCall<GetTopChannelsRequest, GetTopChannelsResponse>;
    /**
     * Gets all servers that exist in the process.
     *
     * @generated from protobuf rpc: GetServers
     */
    getServers(input: GetServersRequest, options?: RpcOptions): UnaryCall<GetServersRequest, GetServersResponse>;
    /**
     * Returns a single Server, or else a NOT_FOUND code.
     *
     * @generated from protobuf rpc: GetServer
     */
    getServer(input: GetServerRequest, options?: RpcOptions): UnaryCall<GetServerRequest, GetServerResponse>;
    /**
     * Gets all server sockets that exist in the process.
     *
     * @generated from protobuf rpc: GetServerSockets
     */
    getServerSockets(input: GetServerSocketsRequest, options?: RpcOptions): UnaryCall<GetServerSocketsRequest, GetServerSocketsResponse>;
    /**
     * Returns a single Channel, or else a NOT_FOUND code.
     *
     * @generated from protobuf rpc: GetChannel
     */
    getChannel$(input: GetChannelRequest, options?: RpcOptions): UnaryCall<GetChannelRequest, GetChannelResponse>;
    /**
     * Returns a single Subchannel, or else a NOT_FOUND code.
     *
     * @generated from protobuf rpc: GetSubchannel
     */
    getSubchannel(input: GetSubchannelRequest, options?: RpcOptions): UnaryCall<GetSubchannelRequest, GetSubchannelResponse>;
    /**
     * Returns a single Socket or else a NOT_FOUND code.
     *
     * @generated from protobuf rpc: GetSocket
     */
    getSocket(input: GetSocketRequest, options?: RpcOptions): UnaryCall<GetSocketRequest, GetSocketResponse>;
}
/**
 * Channelz is a service exposed by gRPC servers that provides detailed debug
 * information.
 *
 * @generated from protobuf service grpc.channelz.v1.Channelz
 */
export class ChannelzClient implements IChannelzClient, ServiceInfo {
    typeName = Channelz.typeName;
    methods = Channelz.methods;
    options = Channelz.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Gets all root channels (i.e. channels the application has directly
     * created). This does not include subchannels nor non-top level channels.
     *
     * @generated from protobuf rpc: GetTopChannels
     */
    getTopChannels(input: GetTopChannelsRequest, options?: RpcOptions): UnaryCall<GetTopChannelsRequest, GetTopChannelsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTopChannelsRequest, GetTopChannelsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Gets all servers that exist in the process.
     *
     * @generated from protobuf rpc: GetServers
     */
    getServers(input: GetServersRequest, options?: RpcOptions): UnaryCall<GetServersRequest, GetServersResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetServersRequest, GetServersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns a single Server, or else a NOT_FOUND code.
     *
     * @generated from protobuf rpc: GetServer
     */
    getServer(input: GetServerRequest, options?: RpcOptions): UnaryCall<GetServerRequest, GetServerResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetServerRequest, GetServerResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Gets all server sockets that exist in the process.
     *
     * @generated from protobuf rpc: GetServerSockets
     */
    getServerSockets(input: GetServerSocketsRequest, options?: RpcOptions): UnaryCall<GetServerSocketsRequest, GetServerSocketsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetServerSocketsRequest, GetServerSocketsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns a single Channel, or else a NOT_FOUND code.
     *
     * @generated from protobuf rpc: GetChannel
     */
    getChannel$(input: GetChannelRequest, options?: RpcOptions): UnaryCall<GetChannelRequest, GetChannelResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetChannelRequest, GetChannelResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns a single Subchannel, or else a NOT_FOUND code.
     *
     * @generated from protobuf rpc: GetSubchannel
     */
    getSubchannel(input: GetSubchannelRequest, options?: RpcOptions): UnaryCall<GetSubchannelRequest, GetSubchannelResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetSubchannelRequest, GetSubchannelResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns a single Socket or else a NOT_FOUND code.
     *
     * @generated from protobuf rpc: GetSocket
     */
    getSocket(input: GetSocketRequest, options?: RpcOptions): UnaryCall<GetSocketRequest, GetSocketResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetSocketRequest, GetSocketResponse>("unary", this._transport, method, opt, input);
    }
}
