/* eslint-disable */
// @generated by protobuf-ts 2.11.1 with parameter long_type_string,optimize_code_size,eslint_disable,ts_nocheck
// @generated from protobuf file "soulfire/command.proto" (package "soulfire.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CommandService } from "./command";
import type { CommandCompletionResponse } from "./command";
import type { CommandCompletionRequest } from "./command";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CommandResponse } from "./command";
import type { CommandRequest } from "./command";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service soulfire.v1.CommandService
 */
export interface ICommandServiceClient {
    /**
     * @generated from protobuf rpc: ExecuteCommand
     */
    executeCommand(input: CommandRequest, options?: RpcOptions): UnaryCall<CommandRequest, CommandResponse>;
    /**
     * @generated from protobuf rpc: TabCompleteCommand
     */
    tabCompleteCommand(input: CommandCompletionRequest, options?: RpcOptions): UnaryCall<CommandCompletionRequest, CommandCompletionResponse>;
}
/**
 * @generated from protobuf service soulfire.v1.CommandService
 */
export class CommandServiceClient implements ICommandServiceClient, ServiceInfo {
    typeName = CommandService.typeName;
    methods = CommandService.methods;
    options = CommandService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ExecuteCommand
     */
    executeCommand(input: CommandRequest, options?: RpcOptions): UnaryCall<CommandRequest, CommandResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CommandRequest, CommandResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TabCompleteCommand
     */
    tabCompleteCommand(input: CommandCompletionRequest, options?: RpcOptions): UnaryCall<CommandCompletionRequest, CommandCompletionResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CommandCompletionRequest, CommandCompletionResponse>("unary", this._transport, method, opt, input);
    }
}
