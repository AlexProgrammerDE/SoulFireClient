/* eslint-disable */
// @generated by protobuf-ts 2.11.1 with parameter long_type_string,optimize_code_size,eslint_disable,ts_nocheck
// @generated from protobuf file "soulfire/download.proto" (package "soulfire.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ProxyProto } from "./common";
/**
 * @generated from protobuf message soulfire.v1.HeaderPair
 */
export interface HeaderPair {
    /**
     * @generated from protobuf field: string key = 1
     */
    key: string;
    /**
     * @generated from protobuf field: string value = 2
     */
    value: string;
}
/**
 * @generated from protobuf message soulfire.v1.DownloadRequest
 */
export interface DownloadRequest {
    /**
     * @generated from protobuf field: string instance_id = 1
     */
    instanceId: string;
    /**
     * @generated from protobuf field: string uri = 2
     */
    uri: string;
    /**
     * @generated from protobuf field: repeated soulfire.v1.HeaderPair headers = 3
     */
    headers: HeaderPair[];
    /**
     * @generated from protobuf field: optional soulfire.v1.ProxyProto proxy = 4
     */
    proxy?: ProxyProto;
}
/**
 * @generated from protobuf message soulfire.v1.DownloadResponse
 */
export interface DownloadResponse {
    /**
     * @generated from protobuf field: bytes data = 1
     */
    data: Uint8Array;
    /**
     * @generated from protobuf field: repeated soulfire.v1.HeaderPair headers = 2
     */
    headers: HeaderPair[];
    /**
     * @generated from protobuf field: int32 status_code = 3
     */
    statusCode: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class HeaderPair$Type extends MessageType<HeaderPair> {
    constructor() {
        super("soulfire.v1.HeaderPair", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HeaderPair>): HeaderPair {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.key = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<HeaderPair>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HeaderPair): HeaderPair {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HeaderPair, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.HeaderPair
 */
export const HeaderPair = new HeaderPair$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DownloadRequest$Type extends MessageType<DownloadRequest> {
    constructor() {
        super("soulfire.v1.DownloadRequest", [
            { no: 1, name: "instance_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "headers", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => HeaderPair },
            { no: 4, name: "proxy", kind: "message", T: () => ProxyProto }
        ]);
    }
    create(value?: PartialMessage<DownloadRequest>): DownloadRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.instanceId = "";
        message.uri = "";
        message.headers = [];
        if (value !== undefined)
            reflectionMergePartial<DownloadRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DownloadRequest): DownloadRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string instance_id */ 1:
                    message.instanceId = reader.string();
                    break;
                case /* string uri */ 2:
                    message.uri = reader.string();
                    break;
                case /* repeated soulfire.v1.HeaderPair headers */ 3:
                    message.headers.push(HeaderPair.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional soulfire.v1.ProxyProto proxy */ 4:
                    message.proxy = ProxyProto.internalBinaryRead(reader, reader.uint32(), options, message.proxy);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DownloadRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string instance_id = 1; */
        if (message.instanceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.instanceId);
        /* string uri = 2; */
        if (message.uri !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uri);
        /* repeated soulfire.v1.HeaderPair headers = 3; */
        for (let i = 0; i < message.headers.length; i++)
            HeaderPair.internalBinaryWrite(message.headers[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional soulfire.v1.ProxyProto proxy = 4; */
        if (message.proxy)
            ProxyProto.internalBinaryWrite(message.proxy, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.DownloadRequest
 */
export const DownloadRequest = new DownloadRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DownloadResponse$Type extends MessageType<DownloadResponse> {
    constructor() {
        super("soulfire.v1.DownloadResponse", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "headers", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => HeaderPair },
            { no: 3, name: "status_code", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DownloadResponse>): DownloadResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = new Uint8Array(0);
        message.headers = [];
        message.statusCode = 0;
        if (value !== undefined)
            reflectionMergePartial<DownloadResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DownloadResponse): DownloadResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                case /* repeated soulfire.v1.HeaderPair headers */ 2:
                    message.headers.push(HeaderPair.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 status_code */ 3:
                    message.statusCode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DownloadResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes data = 1; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        /* repeated soulfire.v1.HeaderPair headers = 2; */
        for (let i = 0; i < message.headers.length; i++)
            HeaderPair.internalBinaryWrite(message.headers[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 status_code = 3; */
        if (message.statusCode !== 0)
            writer.tag(3, WireType.Varint).int32(message.statusCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.DownloadResponse
 */
export const DownloadResponse = new DownloadResponse$Type();
/**
 * @generated ServiceType for protobuf service soulfire.v1.DownloadService
 */
export const DownloadService = new ServiceType("soulfire.v1.DownloadService", [
    { name: "Download", options: {}, I: DownloadRequest, O: DownloadResponse }
]);
