/* eslint-disable */
// @generated by protobuf-ts 2.11.1 with parameter long_type_string,optimize_code_size,eslint_disable,ts_nocheck
// @generated from protobuf file "soulfire/mc-auth.proto" (package "soulfire.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { AccountTypeDeviceCode } from "./common";
import { MinecraftAccountProto } from "./common";
import { AccountTypeCredentials } from "./common";
/**
 * @generated from protobuf message soulfire.v1.CredentialsAuthRequest
 */
export interface CredentialsAuthRequest {
    /**
     * @generated from protobuf field: string instance_id = 1
     */
    instanceId: string;
    /**
     * @generated from protobuf field: soulfire.v1.AccountTypeCredentials service = 2
     */
    service: AccountTypeCredentials;
    /**
     * @generated from protobuf field: repeated string payload = 3
     */
    payload: string[];
}
/**
 * Full response of all accounts that were authenticated
 *
 * @generated from protobuf message soulfire.v1.CredentialsAuthFullList
 */
export interface CredentialsAuthFullList {
    /**
     * @generated from protobuf field: repeated soulfire.v1.MinecraftAccountProto account = 1
     */
    account: MinecraftAccountProto[];
}
/**
 * Used when an account is successfully authenticated
 *
 * @generated from protobuf message soulfire.v1.CredentialsAuthOneSuccess
 */
export interface CredentialsAuthOneSuccess {
}
/**
 * Used when an account is not successfully authenticated
 *
 * @generated from protobuf message soulfire.v1.CredentialsAuthOneFailure
 */
export interface CredentialsAuthOneFailure {
}
/**
 * @generated from protobuf message soulfire.v1.CredentialsAuthResponse
 */
export interface CredentialsAuthResponse {
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "fullList";
        /**
         * @generated from protobuf field: soulfire.v1.CredentialsAuthFullList full_list = 1
         */
        fullList: CredentialsAuthFullList;
    } | {
        oneofKind: "oneSuccess";
        /**
         * @generated from protobuf field: soulfire.v1.CredentialsAuthOneSuccess one_success = 2
         */
        oneSuccess: CredentialsAuthOneSuccess;
    } | {
        oneofKind: "oneFailure";
        /**
         * @generated from protobuf field: soulfire.v1.CredentialsAuthOneFailure one_failure = 3
         */
        oneFailure: CredentialsAuthOneFailure;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message soulfire.v1.DeviceCodeAuthRequest
 */
export interface DeviceCodeAuthRequest {
    /**
     * @generated from protobuf field: string instance_id = 1
     */
    instanceId: string;
    /**
     * @generated from protobuf field: soulfire.v1.AccountTypeDeviceCode service = 2
     */
    service: AccountTypeDeviceCode;
}
/**
 * @generated from protobuf message soulfire.v1.DeviceCode
 */
export interface DeviceCode {
    /**
     * @generated from protobuf field: string device_code = 1
     */
    deviceCode: string;
    /**
     * @generated from protobuf field: string user_code = 2
     */
    userCode: string;
    /**
     * @generated from protobuf field: string verification_uri = 3
     */
    verificationUri: string;
    /**
     * @generated from protobuf field: string direct_verification_uri = 4
     */
    directVerificationUri: string;
}
/**
 * @generated from protobuf message soulfire.v1.DeviceCodeAuthResponse
 */
export interface DeviceCodeAuthResponse {
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "account";
        /**
         * @generated from protobuf field: soulfire.v1.MinecraftAccountProto account = 1
         */
        account: MinecraftAccountProto;
    } | {
        oneofKind: "deviceCode";
        /**
         * @generated from protobuf field: soulfire.v1.DeviceCode device_code = 2
         */
        deviceCode: DeviceCode;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message soulfire.v1.RefreshRequest
 */
export interface RefreshRequest {
    /**
     * @generated from protobuf field: string instance_id = 1
     */
    instanceId: string;
    /**
     * @generated from protobuf field: soulfire.v1.MinecraftAccountProto account = 2
     */
    account?: MinecraftAccountProto;
}
/**
 * @generated from protobuf message soulfire.v1.RefreshResponse
 */
export interface RefreshResponse {
    /**
     * @generated from protobuf field: soulfire.v1.MinecraftAccountProto account = 1
     */
    account?: MinecraftAccountProto;
}
// @generated message type with reflection information, may provide speed optimized methods
class CredentialsAuthRequest$Type extends MessageType<CredentialsAuthRequest> {
    constructor() {
        super("soulfire.v1.CredentialsAuthRequest", [
            { no: 1, name: "instance_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "service", kind: "enum", T: () => ["soulfire.v1.AccountTypeCredentials", AccountTypeCredentials] },
            { no: 3, name: "payload", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CredentialsAuthRequest>): CredentialsAuthRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.instanceId = "";
        message.service = 0;
        message.payload = [];
        if (value !== undefined)
            reflectionMergePartial<CredentialsAuthRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CredentialsAuthRequest): CredentialsAuthRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string instance_id */ 1:
                    message.instanceId = reader.string();
                    break;
                case /* soulfire.v1.AccountTypeCredentials service */ 2:
                    message.service = reader.int32();
                    break;
                case /* repeated string payload */ 3:
                    message.payload.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CredentialsAuthRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string instance_id = 1; */
        if (message.instanceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.instanceId);
        /* soulfire.v1.AccountTypeCredentials service = 2; */
        if (message.service !== 0)
            writer.tag(2, WireType.Varint).int32(message.service);
        /* repeated string payload = 3; */
        for (let i = 0; i < message.payload.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.payload[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.CredentialsAuthRequest
 */
export const CredentialsAuthRequest = new CredentialsAuthRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CredentialsAuthFullList$Type extends MessageType<CredentialsAuthFullList> {
    constructor() {
        super("soulfire.v1.CredentialsAuthFullList", [
            { no: 1, name: "account", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => MinecraftAccountProto }
        ]);
    }
    create(value?: PartialMessage<CredentialsAuthFullList>): CredentialsAuthFullList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.account = [];
        if (value !== undefined)
            reflectionMergePartial<CredentialsAuthFullList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CredentialsAuthFullList): CredentialsAuthFullList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated soulfire.v1.MinecraftAccountProto account */ 1:
                    message.account.push(MinecraftAccountProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CredentialsAuthFullList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated soulfire.v1.MinecraftAccountProto account = 1; */
        for (let i = 0; i < message.account.length; i++)
            MinecraftAccountProto.internalBinaryWrite(message.account[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.CredentialsAuthFullList
 */
export const CredentialsAuthFullList = new CredentialsAuthFullList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CredentialsAuthOneSuccess$Type extends MessageType<CredentialsAuthOneSuccess> {
    constructor() {
        super("soulfire.v1.CredentialsAuthOneSuccess", []);
    }
    create(value?: PartialMessage<CredentialsAuthOneSuccess>): CredentialsAuthOneSuccess {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CredentialsAuthOneSuccess>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CredentialsAuthOneSuccess): CredentialsAuthOneSuccess {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CredentialsAuthOneSuccess, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.CredentialsAuthOneSuccess
 */
export const CredentialsAuthOneSuccess = new CredentialsAuthOneSuccess$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CredentialsAuthOneFailure$Type extends MessageType<CredentialsAuthOneFailure> {
    constructor() {
        super("soulfire.v1.CredentialsAuthOneFailure", []);
    }
    create(value?: PartialMessage<CredentialsAuthOneFailure>): CredentialsAuthOneFailure {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CredentialsAuthOneFailure>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CredentialsAuthOneFailure): CredentialsAuthOneFailure {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CredentialsAuthOneFailure, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.CredentialsAuthOneFailure
 */
export const CredentialsAuthOneFailure = new CredentialsAuthOneFailure$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CredentialsAuthResponse$Type extends MessageType<CredentialsAuthResponse> {
    constructor() {
        super("soulfire.v1.CredentialsAuthResponse", [
            { no: 1, name: "full_list", kind: "message", oneof: "data", T: () => CredentialsAuthFullList },
            { no: 2, name: "one_success", kind: "message", oneof: "data", T: () => CredentialsAuthOneSuccess },
            { no: 3, name: "one_failure", kind: "message", oneof: "data", T: () => CredentialsAuthOneFailure }
        ]);
    }
    create(value?: PartialMessage<CredentialsAuthResponse>): CredentialsAuthResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<CredentialsAuthResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CredentialsAuthResponse): CredentialsAuthResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* soulfire.v1.CredentialsAuthFullList full_list */ 1:
                    message.data = {
                        oneofKind: "fullList",
                        fullList: CredentialsAuthFullList.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).fullList)
                    };
                    break;
                case /* soulfire.v1.CredentialsAuthOneSuccess one_success */ 2:
                    message.data = {
                        oneofKind: "oneSuccess",
                        oneSuccess: CredentialsAuthOneSuccess.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).oneSuccess)
                    };
                    break;
                case /* soulfire.v1.CredentialsAuthOneFailure one_failure */ 3:
                    message.data = {
                        oneofKind: "oneFailure",
                        oneFailure: CredentialsAuthOneFailure.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).oneFailure)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CredentialsAuthResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* soulfire.v1.CredentialsAuthFullList full_list = 1; */
        if (message.data.oneofKind === "fullList")
            CredentialsAuthFullList.internalBinaryWrite(message.data.fullList, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* soulfire.v1.CredentialsAuthOneSuccess one_success = 2; */
        if (message.data.oneofKind === "oneSuccess")
            CredentialsAuthOneSuccess.internalBinaryWrite(message.data.oneSuccess, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* soulfire.v1.CredentialsAuthOneFailure one_failure = 3; */
        if (message.data.oneofKind === "oneFailure")
            CredentialsAuthOneFailure.internalBinaryWrite(message.data.oneFailure, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.CredentialsAuthResponse
 */
export const CredentialsAuthResponse = new CredentialsAuthResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceCodeAuthRequest$Type extends MessageType<DeviceCodeAuthRequest> {
    constructor() {
        super("soulfire.v1.DeviceCodeAuthRequest", [
            { no: 1, name: "instance_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "service", kind: "enum", T: () => ["soulfire.v1.AccountTypeDeviceCode", AccountTypeDeviceCode] }
        ]);
    }
    create(value?: PartialMessage<DeviceCodeAuthRequest>): DeviceCodeAuthRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.instanceId = "";
        message.service = 0;
        if (value !== undefined)
            reflectionMergePartial<DeviceCodeAuthRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceCodeAuthRequest): DeviceCodeAuthRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string instance_id */ 1:
                    message.instanceId = reader.string();
                    break;
                case /* soulfire.v1.AccountTypeDeviceCode service */ 2:
                    message.service = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceCodeAuthRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string instance_id = 1; */
        if (message.instanceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.instanceId);
        /* soulfire.v1.AccountTypeDeviceCode service = 2; */
        if (message.service !== 0)
            writer.tag(2, WireType.Varint).int32(message.service);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.DeviceCodeAuthRequest
 */
export const DeviceCodeAuthRequest = new DeviceCodeAuthRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceCode$Type extends MessageType<DeviceCode> {
    constructor() {
        super("soulfire.v1.DeviceCode", [
            { no: 1, name: "device_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "verification_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "direct_verification_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeviceCode>): DeviceCode {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.deviceCode = "";
        message.userCode = "";
        message.verificationUri = "";
        message.directVerificationUri = "";
        if (value !== undefined)
            reflectionMergePartial<DeviceCode>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceCode): DeviceCode {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string device_code */ 1:
                    message.deviceCode = reader.string();
                    break;
                case /* string user_code */ 2:
                    message.userCode = reader.string();
                    break;
                case /* string verification_uri */ 3:
                    message.verificationUri = reader.string();
                    break;
                case /* string direct_verification_uri */ 4:
                    message.directVerificationUri = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceCode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string device_code = 1; */
        if (message.deviceCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.deviceCode);
        /* string user_code = 2; */
        if (message.userCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userCode);
        /* string verification_uri = 3; */
        if (message.verificationUri !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.verificationUri);
        /* string direct_verification_uri = 4; */
        if (message.directVerificationUri !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.directVerificationUri);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.DeviceCode
 */
export const DeviceCode = new DeviceCode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceCodeAuthResponse$Type extends MessageType<DeviceCodeAuthResponse> {
    constructor() {
        super("soulfire.v1.DeviceCodeAuthResponse", [
            { no: 1, name: "account", kind: "message", oneof: "data", T: () => MinecraftAccountProto },
            { no: 2, name: "device_code", kind: "message", oneof: "data", T: () => DeviceCode }
        ]);
    }
    create(value?: PartialMessage<DeviceCodeAuthResponse>): DeviceCodeAuthResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<DeviceCodeAuthResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceCodeAuthResponse): DeviceCodeAuthResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* soulfire.v1.MinecraftAccountProto account */ 1:
                    message.data = {
                        oneofKind: "account",
                        account: MinecraftAccountProto.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).account)
                    };
                    break;
                case /* soulfire.v1.DeviceCode device_code */ 2:
                    message.data = {
                        oneofKind: "deviceCode",
                        deviceCode: DeviceCode.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).deviceCode)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceCodeAuthResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* soulfire.v1.MinecraftAccountProto account = 1; */
        if (message.data.oneofKind === "account")
            MinecraftAccountProto.internalBinaryWrite(message.data.account, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* soulfire.v1.DeviceCode device_code = 2; */
        if (message.data.oneofKind === "deviceCode")
            DeviceCode.internalBinaryWrite(message.data.deviceCode, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.DeviceCodeAuthResponse
 */
export const DeviceCodeAuthResponse = new DeviceCodeAuthResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RefreshRequest$Type extends MessageType<RefreshRequest> {
    constructor() {
        super("soulfire.v1.RefreshRequest", [
            { no: 1, name: "instance_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "account", kind: "message", T: () => MinecraftAccountProto }
        ]);
    }
    create(value?: PartialMessage<RefreshRequest>): RefreshRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.instanceId = "";
        if (value !== undefined)
            reflectionMergePartial<RefreshRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RefreshRequest): RefreshRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string instance_id */ 1:
                    message.instanceId = reader.string();
                    break;
                case /* soulfire.v1.MinecraftAccountProto account */ 2:
                    message.account = MinecraftAccountProto.internalBinaryRead(reader, reader.uint32(), options, message.account);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RefreshRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string instance_id = 1; */
        if (message.instanceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.instanceId);
        /* soulfire.v1.MinecraftAccountProto account = 2; */
        if (message.account)
            MinecraftAccountProto.internalBinaryWrite(message.account, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.RefreshRequest
 */
export const RefreshRequest = new RefreshRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RefreshResponse$Type extends MessageType<RefreshResponse> {
    constructor() {
        super("soulfire.v1.RefreshResponse", [
            { no: 1, name: "account", kind: "message", T: () => MinecraftAccountProto }
        ]);
    }
    create(value?: PartialMessage<RefreshResponse>): RefreshResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RefreshResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RefreshResponse): RefreshResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* soulfire.v1.MinecraftAccountProto account */ 1:
                    message.account = MinecraftAccountProto.internalBinaryRead(reader, reader.uint32(), options, message.account);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RefreshResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* soulfire.v1.MinecraftAccountProto account = 1; */
        if (message.account)
            MinecraftAccountProto.internalBinaryWrite(message.account, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.RefreshResponse
 */
export const RefreshResponse = new RefreshResponse$Type();
/**
 * @generated ServiceType for protobuf service soulfire.v1.MCAuthService
 */
export const MCAuthService = new ServiceType("soulfire.v1.MCAuthService", [
    { name: "LoginCredentials", serverStreaming: true, options: {}, I: CredentialsAuthRequest, O: CredentialsAuthResponse },
    { name: "LoginDeviceCode", serverStreaming: true, options: {}, I: DeviceCodeAuthRequest, O: DeviceCodeAuthResponse },
    { name: "Refresh", options: {}, I: RefreshRequest, O: RefreshResponse }
]);
