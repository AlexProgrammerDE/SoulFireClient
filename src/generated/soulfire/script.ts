/* eslint-disable */
// @generated by protobuf-ts 2.11.1 with parameter long_type_string,optimize_code_size,eslint_disable,ts_nocheck
// @generated from protobuf file "soulfire/script.proto" (package "soulfire.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message soulfire.v1.GlobalScriptScope
 */
export interface GlobalScriptScope {
}
/**
 * @generated from protobuf message soulfire.v1.InstanceScriptScope
 */
export interface InstanceScriptScope {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
}
/**
 * @generated from protobuf message soulfire.v1.ScriptScope
 */
export interface ScriptScope {
    /**
     * @generated from protobuf oneof: scope
     */
    scope: {
        oneofKind: "globalScript";
        /**
         * @generated from protobuf field: soulfire.v1.GlobalScriptScope global_script = 1
         */
        globalScript: GlobalScriptScope;
    } | {
        oneofKind: "instanceScript";
        /**
         * @generated from protobuf field: soulfire.v1.InstanceScriptScope instance_script = 2
         */
        instanceScript: InstanceScriptScope;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message soulfire.v1.CreateScriptRequest
 */
export interface CreateScriptRequest {
    /**
     * @generated from protobuf field: soulfire.v1.ScriptScope scope = 1
     */
    scope?: ScriptScope;
    /**
     * @generated from protobuf field: string script_name = 2
     */
    scriptName: string;
    /**
     * @generated from protobuf field: bool elevated_permissions = 3
     */
    elevatedPermissions: boolean;
}
/**
 * @generated from protobuf message soulfire.v1.CreateScriptResponse
 */
export interface CreateScriptResponse {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
}
/**
 * @generated from protobuf message soulfire.v1.DeleteScriptRequest
 */
export interface DeleteScriptRequest {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
}
/**
 * @generated from protobuf message soulfire.v1.DeleteScriptResponse
 */
export interface DeleteScriptResponse {
}
/**
 * @generated from protobuf message soulfire.v1.RestartScriptRequest
 */
export interface RestartScriptRequest {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
}
/**
 * @generated from protobuf message soulfire.v1.RestartScriptResponse
 */
export interface RestartScriptResponse {
}
/**
 * @generated from protobuf message soulfire.v1.UpdateScriptRequest
 */
export interface UpdateScriptRequest {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: string script_name = 2
     */
    scriptName: string;
    /**
     * @generated from protobuf field: bool elevated_permissions = 3
     */
    elevatedPermissions: boolean;
}
/**
 * @generated from protobuf message soulfire.v1.UpdateScriptResponse
 */
export interface UpdateScriptResponse {
}
/**
 * @generated from protobuf message soulfire.v1.ScriptListRequest
 */
export interface ScriptListRequest {
    /**
     * @generated from protobuf field: soulfire.v1.ScriptScope scope = 1
     */
    scope?: ScriptScope;
}
/**
 * @generated from protobuf message soulfire.v1.ScriptListResponse
 */
export interface ScriptListResponse {
    /**
     * @generated from protobuf field: repeated soulfire.v1.ScriptListResponse.Script scripts = 1
     */
    scripts: ScriptListResponse_Script[];
}
/**
 * @generated from protobuf message soulfire.v1.ScriptListResponse.Script
 */
export interface ScriptListResponse_Script {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: string script_name = 2
     */
    scriptName: string;
    /**
     * @generated from protobuf field: bool elevated_permissions = 3
     */
    elevatedPermissions: boolean;
    /**
     * @generated from protobuf field: soulfire.v1.ScriptLanguage language = 4
     */
    language: ScriptLanguage;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 5
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 6
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: soulfire.v1.ScriptScope script_scope = 7
     */
    scriptScope?: ScriptScope;
}
/**
 * @generated from protobuf enum soulfire.v1.ScriptLanguage
 */
export enum ScriptLanguage {
    /**
     * @generated from protobuf enum value: JAVASCRIPT = 0;
     */
    JAVASCRIPT = 0,
    /**
     * @generated from protobuf enum value: PYTHON = 1;
     */
    PYTHON = 1,
    /**
     * @generated from protobuf enum value: TYPESCRIPT = 2;
     */
    TYPESCRIPT = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class GlobalScriptScope$Type extends MessageType<GlobalScriptScope> {
    constructor() {
        super("soulfire.v1.GlobalScriptScope", []);
    }
    create(value?: PartialMessage<GlobalScriptScope>): GlobalScriptScope {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GlobalScriptScope>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GlobalScriptScope): GlobalScriptScope {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GlobalScriptScope, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.GlobalScriptScope
 */
export const GlobalScriptScope = new GlobalScriptScope$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstanceScriptScope$Type extends MessageType<InstanceScriptScope> {
    constructor() {
        super("soulfire.v1.InstanceScriptScope", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InstanceScriptScope>): InstanceScriptScope {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<InstanceScriptScope>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InstanceScriptScope): InstanceScriptScope {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InstanceScriptScope, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.InstanceScriptScope
 */
export const InstanceScriptScope = new InstanceScriptScope$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScriptScope$Type extends MessageType<ScriptScope> {
    constructor() {
        super("soulfire.v1.ScriptScope", [
            { no: 1, name: "global_script", kind: "message", oneof: "scope", T: () => GlobalScriptScope },
            { no: 2, name: "instance_script", kind: "message", oneof: "scope", T: () => InstanceScriptScope }
        ]);
    }
    create(value?: PartialMessage<ScriptScope>): ScriptScope {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.scope = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ScriptScope>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScriptScope): ScriptScope {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* soulfire.v1.GlobalScriptScope global_script */ 1:
                    message.scope = {
                        oneofKind: "globalScript",
                        globalScript: GlobalScriptScope.internalBinaryRead(reader, reader.uint32(), options, (message.scope as any).globalScript)
                    };
                    break;
                case /* soulfire.v1.InstanceScriptScope instance_script */ 2:
                    message.scope = {
                        oneofKind: "instanceScript",
                        instanceScript: InstanceScriptScope.internalBinaryRead(reader, reader.uint32(), options, (message.scope as any).instanceScript)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScriptScope, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* soulfire.v1.GlobalScriptScope global_script = 1; */
        if (message.scope.oneofKind === "globalScript")
            GlobalScriptScope.internalBinaryWrite(message.scope.globalScript, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* soulfire.v1.InstanceScriptScope instance_script = 2; */
        if (message.scope.oneofKind === "instanceScript")
            InstanceScriptScope.internalBinaryWrite(message.scope.instanceScript, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.ScriptScope
 */
export const ScriptScope = new ScriptScope$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateScriptRequest$Type extends MessageType<CreateScriptRequest> {
    constructor() {
        super("soulfire.v1.CreateScriptRequest", [
            { no: 1, name: "scope", kind: "message", T: () => ScriptScope },
            { no: 2, name: "script_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "elevated_permissions", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CreateScriptRequest>): CreateScriptRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.scriptName = "";
        message.elevatedPermissions = false;
        if (value !== undefined)
            reflectionMergePartial<CreateScriptRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateScriptRequest): CreateScriptRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* soulfire.v1.ScriptScope scope */ 1:
                    message.scope = ScriptScope.internalBinaryRead(reader, reader.uint32(), options, message.scope);
                    break;
                case /* string script_name */ 2:
                    message.scriptName = reader.string();
                    break;
                case /* bool elevated_permissions */ 3:
                    message.elevatedPermissions = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateScriptRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* soulfire.v1.ScriptScope scope = 1; */
        if (message.scope)
            ScriptScope.internalBinaryWrite(message.scope, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string script_name = 2; */
        if (message.scriptName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.scriptName);
        /* bool elevated_permissions = 3; */
        if (message.elevatedPermissions !== false)
            writer.tag(3, WireType.Varint).bool(message.elevatedPermissions);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.CreateScriptRequest
 */
export const CreateScriptRequest = new CreateScriptRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateScriptResponse$Type extends MessageType<CreateScriptResponse> {
    constructor() {
        super("soulfire.v1.CreateScriptResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateScriptResponse>): CreateScriptResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<CreateScriptResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateScriptResponse): CreateScriptResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateScriptResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.CreateScriptResponse
 */
export const CreateScriptResponse = new CreateScriptResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteScriptRequest$Type extends MessageType<DeleteScriptRequest> {
    constructor() {
        super("soulfire.v1.DeleteScriptRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteScriptRequest>): DeleteScriptRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteScriptRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteScriptRequest): DeleteScriptRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteScriptRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.DeleteScriptRequest
 */
export const DeleteScriptRequest = new DeleteScriptRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteScriptResponse$Type extends MessageType<DeleteScriptResponse> {
    constructor() {
        super("soulfire.v1.DeleteScriptResponse", []);
    }
    create(value?: PartialMessage<DeleteScriptResponse>): DeleteScriptResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteScriptResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteScriptResponse): DeleteScriptResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteScriptResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.DeleteScriptResponse
 */
export const DeleteScriptResponse = new DeleteScriptResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RestartScriptRequest$Type extends MessageType<RestartScriptRequest> {
    constructor() {
        super("soulfire.v1.RestartScriptRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RestartScriptRequest>): RestartScriptRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<RestartScriptRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestartScriptRequest): RestartScriptRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RestartScriptRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.RestartScriptRequest
 */
export const RestartScriptRequest = new RestartScriptRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RestartScriptResponse$Type extends MessageType<RestartScriptResponse> {
    constructor() {
        super("soulfire.v1.RestartScriptResponse", []);
    }
    create(value?: PartialMessage<RestartScriptResponse>): RestartScriptResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RestartScriptResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestartScriptResponse): RestartScriptResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RestartScriptResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.RestartScriptResponse
 */
export const RestartScriptResponse = new RestartScriptResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateScriptRequest$Type extends MessageType<UpdateScriptRequest> {
    constructor() {
        super("soulfire.v1.UpdateScriptRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "script_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "elevated_permissions", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateScriptRequest>): UpdateScriptRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.scriptName = "";
        message.elevatedPermissions = false;
        if (value !== undefined)
            reflectionMergePartial<UpdateScriptRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateScriptRequest): UpdateScriptRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string script_name */ 2:
                    message.scriptName = reader.string();
                    break;
                case /* bool elevated_permissions */ 3:
                    message.elevatedPermissions = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateScriptRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string script_name = 2; */
        if (message.scriptName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.scriptName);
        /* bool elevated_permissions = 3; */
        if (message.elevatedPermissions !== false)
            writer.tag(3, WireType.Varint).bool(message.elevatedPermissions);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.UpdateScriptRequest
 */
export const UpdateScriptRequest = new UpdateScriptRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateScriptResponse$Type extends MessageType<UpdateScriptResponse> {
    constructor() {
        super("soulfire.v1.UpdateScriptResponse", []);
    }
    create(value?: PartialMessage<UpdateScriptResponse>): UpdateScriptResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateScriptResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateScriptResponse): UpdateScriptResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateScriptResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.UpdateScriptResponse
 */
export const UpdateScriptResponse = new UpdateScriptResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScriptListRequest$Type extends MessageType<ScriptListRequest> {
    constructor() {
        super("soulfire.v1.ScriptListRequest", [
            { no: 1, name: "scope", kind: "message", T: () => ScriptScope }
        ]);
    }
    create(value?: PartialMessage<ScriptListRequest>): ScriptListRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ScriptListRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScriptListRequest): ScriptListRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* soulfire.v1.ScriptScope scope */ 1:
                    message.scope = ScriptScope.internalBinaryRead(reader, reader.uint32(), options, message.scope);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScriptListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* soulfire.v1.ScriptScope scope = 1; */
        if (message.scope)
            ScriptScope.internalBinaryWrite(message.scope, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.ScriptListRequest
 */
export const ScriptListRequest = new ScriptListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScriptListResponse$Type extends MessageType<ScriptListResponse> {
    constructor() {
        super("soulfire.v1.ScriptListResponse", [
            { no: 1, name: "scripts", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ScriptListResponse_Script }
        ]);
    }
    create(value?: PartialMessage<ScriptListResponse>): ScriptListResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.scripts = [];
        if (value !== undefined)
            reflectionMergePartial<ScriptListResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScriptListResponse): ScriptListResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated soulfire.v1.ScriptListResponse.Script scripts */ 1:
                    message.scripts.push(ScriptListResponse_Script.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScriptListResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated soulfire.v1.ScriptListResponse.Script scripts = 1; */
        for (let i = 0; i < message.scripts.length; i++)
            ScriptListResponse_Script.internalBinaryWrite(message.scripts[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.ScriptListResponse
 */
export const ScriptListResponse = new ScriptListResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScriptListResponse_Script$Type extends MessageType<ScriptListResponse_Script> {
    constructor() {
        super("soulfire.v1.ScriptListResponse.Script", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "script_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "elevated_permissions", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "language", kind: "enum", T: () => ["soulfire.v1.ScriptLanguage", ScriptLanguage] },
            { no: 5, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 6, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 7, name: "script_scope", kind: "message", T: () => ScriptScope }
        ]);
    }
    create(value?: PartialMessage<ScriptListResponse_Script>): ScriptListResponse_Script {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.scriptName = "";
        message.elevatedPermissions = false;
        message.language = 0;
        if (value !== undefined)
            reflectionMergePartial<ScriptListResponse_Script>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScriptListResponse_Script): ScriptListResponse_Script {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string script_name */ 2:
                    message.scriptName = reader.string();
                    break;
                case /* bool elevated_permissions */ 3:
                    message.elevatedPermissions = reader.bool();
                    break;
                case /* soulfire.v1.ScriptLanguage language */ 4:
                    message.language = reader.int32();
                    break;
                case /* google.protobuf.Timestamp created_at */ 5:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 6:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* soulfire.v1.ScriptScope script_scope */ 7:
                    message.scriptScope = ScriptScope.internalBinaryRead(reader, reader.uint32(), options, message.scriptScope);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScriptListResponse_Script, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string script_name = 2; */
        if (message.scriptName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.scriptName);
        /* bool elevated_permissions = 3; */
        if (message.elevatedPermissions !== false)
            writer.tag(3, WireType.Varint).bool(message.elevatedPermissions);
        /* soulfire.v1.ScriptLanguage language = 4; */
        if (message.language !== 0)
            writer.tag(4, WireType.Varint).int32(message.language);
        /* google.protobuf.Timestamp created_at = 5; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 6; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* soulfire.v1.ScriptScope script_scope = 7; */
        if (message.scriptScope)
            ScriptScope.internalBinaryWrite(message.scriptScope, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message soulfire.v1.ScriptListResponse.Script
 */
export const ScriptListResponse_Script = new ScriptListResponse_Script$Type();
/**
 * @generated ServiceType for protobuf service soulfire.v1.ScriptService
 */
export const ScriptService = new ServiceType("soulfire.v1.ScriptService", [
    { name: "CreateScript", options: {}, I: CreateScriptRequest, O: CreateScriptResponse },
    { name: "DeleteScript", options: {}, I: DeleteScriptRequest, O: DeleteScriptResponse },
    { name: "RestartScript", options: {}, I: RestartScriptRequest, O: RestartScriptResponse },
    { name: "UpdateScript", options: {}, I: UpdateScriptRequest, O: UpdateScriptResponse },
    { name: "ListScripts", options: {}, I: ScriptListRequest, O: ScriptListResponse }
]);
